#! /usr/bin/ruby

#--
###############################################################################
#                                                                             #
# flattendb -- Flatten relational databases                                   #
#                                                                             #
# Copyright (C) 2007 University of Cologne,                                   #
#                    Albertus-Magnus-Platz,                                   #
#                    50932 Cologne, Germany                                   #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@uni-koeln.de>                                    #
#                                                                             #
# flattendb is free software; you can redistribute it and/or modify it under  #
# the terms of the GNU General Public License as published by the Free        #
# Software Foundation; either version 3 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# flattendb is distributed in the hope that it will be useful, but WITHOUT    #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       #
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for    #
# more details.                                                               #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with flattendb. If not, see <http://www.gnu.org/licenses/>.                 #
#                                                                             #
###############################################################################
#++

require 'optparse'

require 'rubygems'
require 'highline/import'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'flattendb'

USAGE = "Usage: #{$0} [-h|--help] [options] <infile> <outfile> <configfile>"

options = {
  :type => 'mysql',
  :mysql => {
    :intype => :xml,
    :keep   => false
  }
}

OptionParser.new { |opts|
  opts.banner = USAGE
  opts.separator ''

  opts.separator 'Options:'
  opts.on('-t', '--type TYPE', "Type of database at hand [Default: #{options[:type]}]") { |t|
    options[:type] = t.downcase.to_sym
  }

  opts.separator ''
  opts.separator 'Database-specific Options:'

  opts.separator ''
  opts.separator '- MySQL'
  opts.on('-x', '--xml', "Input file is of type XML [This is the default]") {
    options[:intype] = :xml
  }
  opts.on('-s', '--sql', "Input file is of type SQL") {
    options[:intype] = :sql
  }
  opts.on('-k', '--keep', "Keep intermediate XML dump; only applies if input type is 'sql'") {
    options[:keep] = true
  }

  opts.separator ''
  opts.separator 'Generic options:'
  opts.on('-h', '--help', 'Print this help message and exit') {
    abort opts.to_s
  }
  opts.on('--version', 'Print program version and exit') {
    abort "#{File.basename($0)} v#{FlattenDB::VERSION}"
  }
}.parse!

type    = options[:type]
options = options[type.to_sym]

# Load corresponding module
begin
  require "flattendb/#{type}"
rescue LoadError
  abort "Database type '#{type}' is not supported at the moment."
end

abort USAGE unless ARGV.size == 3

infile, outfile, configfile = ARGV

abort "Input file not found: #{infile}" unless File.readable?(infile)

case type
  when :mysql
    case options[:intype]
      when :xml
        abort "Input file doesn't seem to be a valid XML file, XML declaration missing" unless IO.read(infile, 6) == '<?xml '
      when :sql
        require 'mysql'

        mysql_user = ask('Please enter the MySQL user name: ')              { |q| q.default = ENV['USER'] }
        mysql_pass = ask("Please enter the MySQL password for that user: ") { |q| q.echo    = false       }

        # according to <http://www.adamspiers.org/computing/mysqldiff/#how> MySQL
        # default permissions allow anyone to create databases beginning with the
        # prefix 'test_'
        temp_db   = 'flattendb_temp_%d_%d' % [Time.now, $$]
        temp_user = 'flattendb_user'
        temp_pass = 'flattendb_pass'

        dump_file = infile.sub(/\.(?:sql|dump)$/i, '') << '.xml'
        abort "Dump file and output file are the same: #{dump_file} = #{outfile}" if File.expand_path(dump_file) == File.expand_path(outfile)

        mysql_cmd = "/usr/bin/mysql --one-database -u#{temp_user} -p#{temp_pass} #{temp_db} < #{infile}"
        dump_cmd  = "/usr/bin/mysqldump --xml -u#{temp_user} -p#{temp_pass} #{temp_db} > #{dump_file}"

        begin
          mysql = Mysql.real_connect('localhost', mysql_user, mysql_pass)

          mysql.query("CREATE DATABASE #{temp_db}")
          mysql.query("GRANT ALL ON #{temp_db}.* TO '#{temp_user}'@'localhost' IDENTIFIED BY '#{temp_pass}'")

          system("#{mysql_cmd} && #{dump_cmd}")
        rescue Mysql::Error => err
          abort "ERROR #{err.errno} (#{err.sqlstate}): #{err.error}"
        ensure
          if mysql
            mysql.query("REVOKE ALL ON #{temp_db}.* FROM '#{temp_user}'@'localhost'") if mysql_user == 'root'
            mysql.query("DROP DATABASE IF EXISTS #{temp_db}")
            mysql.close
          end
        end

        infile = dump_file
    end
end

FlattenDB[type].new(infile, outfile, configfile).flatten!.to_xml

File.delete(dump_file) if dump_file && !options[:keep]
