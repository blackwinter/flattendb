#! /usr/bin/ruby

#--
###############################################################################
#                                                                             #
# flattendb -- Flatten relational databases                                   #
#                                                                             #
# Copyright (C) 2007-2011 University of Cologne,                              #
#                         Albertus-Magnus-Platz,                              #
#                         50923 Cologne, Germany                              #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@uni-koeln.de>                                    #
#                                                                             #
# flattendb is free software; you can redistribute it and/or modify it under  #
# the terms of the GNU Affero General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# flattendb is distributed in the hope that it will be useful, but WITHOUT    #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       #
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License #
# for more details.                                                           #
#                                                                             #
# You should have received a copy of the GNU Affero General Public License    #
# along with flattendb. If not, see <http://www.gnu.org/licenses/>.           #
#                                                                             #
###############################################################################
#++

require 'optparse'

require 'rubygems'
require 'highline/import'
require 'nuggets/array/flatten_once'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'flattendb'
require 'flattendb/cli'

include FlattenDB::CLI

USAGE = "Usage: #{$0} [-h|--help] [options]"
abort USAGE if ARGV.empty?

$global_options = {
  :type    => :mysql,
  :infiles => [],
  :outfile => nil,
  :confile => nil,
  :keep    => false,
  :mysql => {
    :intype => :xml
  },
  :mdb => {
    :intype => :mdb
  }
}

$opts_by_type = {
  :mysql => {
    :title => 'MySQL',
    :opts  => lambda { |opts|
      opts.on('-x', '--mysql-xml', "Input file is of type XML [This is the default]") {
        $global_options[:mysql][:intype] = :xml
      }
      opts.on('-s', '--sql', "Input file is of type SQL") {
        $global_options[:mysql][:intype] = :sql
      }
    }
  },
  :mdb => {
    :title => 'MS Access',
    :opts  => lambda { |opts|
      opts.on('-m', '--mdb', "Input file is of type MDB [This is the default]") {
        $global_options[:mdb][:intype] = :mdb
      }
      opts.on('-y', '--mdb-xml', "Input file is of type XML") {
        $global_options[:mdb][:intype] = :xml
      }
    }
  }
}

def type_options(type, opts, with_heading = true)
  if type == :all
    $opts_by_type.keys.sort_by { |t| t.to_s }.each { |t|
      type_options(t, opts, with_heading)
    }
  else
    opt = $opts_by_type[type.to_sym]

    if with_heading
      opts.separator ''
      opts.separator " - [#{type}] #{opt[:title]}"
    end

    opt[:opts][opts]
  end
end

OptionParser.new { |opts|
  opts.banner = USAGE

  opts.separator ''
  opts.separator 'Options:'

  if $type
    opts.separator "   [-t, --type]                      TYPE OVERRIDE IN EFFECT (#{$type})"
  else
    opts.on('-t', '--type TYPE', "Type of database at hand [Default: #{$global_options[:type]}]") { |t|
      $global_options[:type] = t.downcase.to_sym
    }
  end

  opts.separator ''

  opts.on('-i', '--input-file FILE', "Input file; depending on the database type, this option", "may be given multiple times [REQUIRED]") { |f|
    $global_options[:infiles] << f
  }

  opts.on('-o', '--output-file FILE', "Output file (flat XML) [REQUIRED]") { |f|
    $global_options[:outfile] = f
  }

  opts.on('-c', '--config-file FILE', "Configuration file (YAML) [REQUIRED]") { |f|
    $global_options[:confile] = f
  }

  opts.separator ''

  opts.on('-k', '--keep', "Keep any intermediate files (generated XML dumps, etc.)") {
    $global_options[:keep] = true
  }

  opts.separator ''
  opts.separator 'Database-specific Options:'

  if $type
    type_options($type, opts, false)
  else
    type_options(:all, opts)
  end

  opts.separator ''
  opts.separator 'Generic options:'

  opts.on('-h', '--help', 'Print this help message and exit') {
    abort opts.to_s
  }

  opts.on('--version', 'Print program version and exit') {
    abort "#{File.basename($0)} v#{FlattenDB::VERSION}"
  }
}.parse!

$type  ||= $global_options[:type]
$options = $global_options[$type] || {}

# Load corresponding module
begin
  require "flattendb/types/#{$type}"
rescue LoadError
  abort "Database type '#{$type}' is not supported at the moment."
end

abort "No output file specified" unless $global_options[:outfile]

if confile = $global_options[:confile]
  abort "Configuration file not found: #{confile}" unless File.readable?(confile)
else
  abort "No configuration file specified"
end

$global_options[:infiles].each { |infile|
  abort "Input file not found: #{infile}" unless File.readable?(infile)
}

$infiles = $global_options[:infiles]
$outfile = $global_options[:outfile]
$confile = $global_options[:confile]

# Load type-specific script
begin
  load File.join(File.dirname(__FILE__), "flattendb.#{$type}")
rescue LoadError
  # silently ignore
end

FlattenDB[$type].new($infile || $infiles, $outfile, $confile).flatten!.to_xml

unless $global_options[:keep]
  File.delete($dump_file) if $dump_file
end
