#! /usr/bin/ruby

#--
###############################################################################
#                                                                             #
# flattendb -- Flatten relational databases                                   #
#                                                                             #
# Copyright (C) 2007 University of Cologne,                                   #
#                    Albertus-Magnus-Platz,                                   #
#                    50932 Cologne, Germany                                   #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@uni-koeln.de>                                    #
#                                                                             #
# flattendb is free software; you can redistribute it and/or modify it under  #
# the terms of the GNU General Public License as published by the Free        #
# Software Foundation; either version 3 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# flattendb is distributed in the hope that it will be useful, but WITHOUT    #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       #
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for    #
# more details.                                                               #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with flattendb. If not, see <http://www.gnu.org/licenses/>.                 #
#                                                                             #
###############################################################################
#++

require 'optparse'

require 'rubygems'
require 'highline/import'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'flattendb'

USAGE = "Usage: #{$0} [-h|--help] [options] <infile> <outfile> <configfile>"

$options = {
  :type => :mysql,
  :mysql => {
    :intype => :xml,
    :keep   => false
  }
}

def type_options(type, opts, with_heading = true)
  heading = lambda { |name|
    if with_heading
      opts.separator ''
      opts.separator "- #{name}"
    end
  }

  case type.to_sym
    when :mysql
      heading['MySQL']

      opts.on('-x', '--xml', "Input file is of type XML [This is the default]") {
        $options[:mysql][:intype] = :xml
      }
      opts.on('-s', '--sql', "Input file is of type SQL") {
        $options[:mysql][:intype] = :sql
      }
      opts.on('-k', '--keep', "Keep intermediate XML dump; only applies if input type is 'sql'") {
        $options[:mysql][:keep] = true
      }
  end
end

OptionParser.new { |opts|
  opts.banner = USAGE
  opts.separator ''

  opts.separator 'Options:'
  if $type
    opts.separator "   [-t, --type]                      TYPE OVERRIDE IN EFFECT (#{$type})"
  else
    opts.on('-t', '--type TYPE', "Type of database at hand [Default: #{$options[:type]}]") { |t|
      $options[:type] = t.downcase.to_sym
    }
  end

  opts.separator ''
  opts.separator 'Database-specific Options:'

  if $type
    type_options($type, opts, false)
  else
    %w[mysql].each { |t|
      type_options(t, opts)
    }
  end

  opts.separator ''
  opts.separator 'Generic options:'
  opts.on('-h', '--help', 'Print this help message and exit') {
    abort opts.to_s
  }
  opts.on('--version', 'Print program version and exit') {
    abort "#{File.basename($0)} v#{FlattenDB::VERSION}"
  }
}.parse!

$type  ||= $options[:type]
$options = $options[$type] || {}

# Load corresponding module
begin
  require "flattendb/#{$type}"
rescue LoadError
  abort "Database type '#{$type}' is not supported at the moment."
end

abort USAGE unless ARGV.size == 3

$infile, $outfile, configfile = ARGV

abort "Input file not found: #{$infile}" unless File.readable?($infile)

# Load type-specific script
load File.join(File.dirname(__FILE__), "flattendb.#{$type}")

FlattenDB[$type].new($infile, $outfile, configfile).flatten!.to_xml

File.delete($dump_file) if $dump_file && !$options[:keep]
